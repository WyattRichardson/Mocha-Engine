#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoord;

uniform mat4 projectionMatrix;
uniform mat4 transformationMatrix;
uniform vec3 lightPositions[4];
uniform vec3 lightColors[4];

out vec3 toLightVectors[4];
out vec2 interpTexCoord;
out vec3 interpNormal;

void main(){

	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	for(int i = 0; i < 4; i++){
		toLightVectors[i] = vec3(vec4(lightPositions[i], 1.0) - worldPosition);
	}
	interpNormal = (transformationMatrix * vec4(normal,0.0)).xyz; //0.0 makes only rotation change
	gl_Position = projectionMatrix * worldPosition; //always vertex data between -1, 1
	
}